#install.packages("epitools", repos="http://cran.us.r-project.org")
library(XLConnect)
library(readxl)
library(xlsx)
library(dplyr)
library(tidyverse)
library(reshape2)
library(lubridate)
library(epitools)
library(eeptools)

#natly <- read_excel("C:\\Users\\P1318124\\Downloads\\0. Template Remit and Prepaid Topup (1).xlsx","Remit raw")

natly <- read.csv("C:\\Users\\P1318124\\Downloads\\Revised_Nationality.csv",header=TRUE)

#natly2 <- read.csv("C:\\Users\\P1318124\\Downloads\\Nationality_Original.csv",header=TRUE)


natly_day <- read.csv("C:\\Users\\P1318124\\Desktop\\Remittance\\Daily Telepin Reports\\28 Aug\\RepResult.4.Report_Remittance_Nationality.S.1.Daily_Report_Remittance_by_Nationality_20180828063000.csv",header=TRUE)

dim(natly)#726265     41
dim(natly_day) #2306   31


natly_rev <- natly[,-1]
dim(natly_rev) #726265     40

test_class <- rep("FALSE",ncol(natly_day))
for(i in 1:ncol(natly_day)){
if(class(natly_day[,i])==class(natly_rev[,i])){
test_class[i] <- "TRUE"
}
}
test_class

length(test_class[test_class=="TRUE"]) #27
length(test_class[test_class!="TRUE"]) #4

x <- natly_rev
y <- natly_day

##########################################
#Dealing with unmatching classes: Round 1#

#Column 3#
class(x[,3])
head(x[,3])

class(y[,3])
head(y[,3])
head(as.numeric(y[,3]))

y[,3] <- as.numeric(y[,3])

#Column 20#
class(x[,20])
head(x[,20])

class(y[,20])
head(y[,20])
head(as.numeric(y[,20]))

y[,20] <- as.numeric(y[,20])

#Column 27#
class(x[,27])
head(x[,27])

class(y[,27])
head(y[,27])
head(as.numeric(y[,27]))

y[,27] <- as.numeric(y[,27])

#Column 31#
class(x[,31])
head(x[,31])

class(y[,31])
head(y[,31])
#head(as.numeric(y[,31]))
#head(as.numeric(levels(y[,31])[y[,31]]))
#head(as.numeric(as.character(y[,31]))) #cannot use numeric as data in y[,31] contains characters eg 'TS001..'.
head(as.character(x[,31]))
head(as.character(y[,31]))

#y[,31] <- as.numeric(y[,31])
#y[,31] <- as.character(y[,31])
#x[,31] <- as.character(x[,31])

################################################################################################################

test_class <- rep("FALSE",ncol(y))
for(i in 1:ncol(y)){
if(class(y[,i])==class(x[,i])){
test_class[i] <- "TRUE"
}
}
test_class

length(test_class[test_class=="TRUE"]) #31
length(test_class[test_class!="TRUE"]) #0

################################################################################################################

#MONTH#

class(x$Month)

y[,2] <- as.factor(as.POSIXct(dmy_hms(y[,2]),format="%Y-%m-%d %H:%M:%S"))
#y_date <- as.POSIXct(y$TRANSACTION_DATE,format='%d/%m/%Y',tz="UTC")
y_year <- year(y[,2])
y_month <- month(y[,2])
y_ym <- data.frame(y_year,y_month) %>%
unite(k,c(y_year,y_month),sep="",remove=FALSE)
y_m <- y_ym[,1]
y_m <- as.integer(y_m)

y2 <- cbind(y,y_m)

#x_year <- year(x[,2])
#x_month <- month(x[,2])
#x_ym <- data.frame(x_year,x_month) %>%
#unite(k,c(x_year,x_month),sep="",remove=FALSE)
#x_m <- x_ym[,1]
#x_m <- as.integer(x_m)
#x[,32] <- x_m

################################################################################################################

#DAY#

y_date <- as.POSIXct(y[,2],format='%Y-%m-%d %H:%M:%S')
y_weekday <- weekdays(as.POSIXct(y[,2],format='%Y-%m-%d %H:%M:%S'))
x_weekday <- weekdays(as.POSIXct(x[,2],format='%Y-%m-%d %H:%M:%S'))
x[,33] <- as.factor(x_weekday)
y_weekday <- as.factor(y_weekday)

y3 <- cbind(y2,y_weekday)

###############################################################################################################

#TRANSACTION_FEE_SGD#


txn_fee <- y$TRANSACTION_FEE_SGD

for(i in 1:nrow(y)){

txn_fee[i] <- (y$TRANSACTION_FEE_SGD[i])/(-1.)

}

y4 <- cbind(y3,txn_fee)

############################################################################################################

#FX_MARGIN_SGD_POSTIVE#

fx_margin <- y$FX_MARGIN_SGD

for(i in 1:nrow(y)){

if(y$FX_MARGIN_SGD[i] < 0){

fx_margin[i] <- fx_margin[i]*(-1)

}
}

y5 <- cbind(y4,fx_margin)


x_fx_margin <- x$FX_MARGIN_SGD_NEGATIVE
#for(i in 1:nrow(x)){
#if(x$FX_MARGIN_SGD_NEGATIVE < 0){
#x_fx_margin[i] <- x_fx_margin[i]*(-1)
#}
#}

x_fx <-lapply(x_fx_margin, function(p) if(p<0){ p<- p*(-1)} else{p <- p})

x_fx <- unlist(x_fx)

x[,35] <- x_fx_margin







###########################################################################################################

#a <- as.Date(x[,2])
#b <- as.Date(df_cash_out_raw[,50],format="%Y-%m-%d")
#a[is.na(a)] <- b[!is.na(b)]
#df_cash_out_raw[,50] <- a
#dates_df_cash_out_raw <- df_cash_out_raw[,50]
#result <- data.frame(dates_df_cash_out_raw,
#cut_Date=cut(as.Date(dates_df_cash_out_raw),"week", start.on.monday=FALSE),
#cut_POSIXt=cut(as.POSIXct(dates_df_cash_out_raw),"week",start.on.monday=FALSE),
#stringsAsFactors=FALSE) 
#df_cash_out_raw[,52] <- result[,3]

#dates_cash_out_daily_filtered_sort <- txn_date
y_week <- data.frame(y[,2],
cut_Date=cut(as.Date(y[,2]),"week", start.on.monday=FALSE),
cut_POSIXt=cut(as.POSIXct(y[,2]),"week",start.on.monday=FALSE),
stringsAsFactors=FALSE) 
y_week_final <- y_week[,3]
#result_2_final <- result_2_final[-(length(result_2_final))]

#x_week <- data.frame(x[,2],
#cut_Date=cut(as.Date(x[,2]),"week", start.on.monday=FALSE),
#cut_POSIXt=cut(as.POSIXct(x[,2]),"week",start.on.monday=FALSE),
#stringsAsFactors=FALSE) 
#x_week_final <- x_week[,3]
#x[,36] <- x_week_final

y6 <- cbind(y5,y_week_final)

##########################################################################################################

#FY#

y_fy <- rep("FY1819",nrow(y)) ###########@@@@@@@@@MANUAL@@@@@@@@@@@@###########
y_fy <- as.factor(y_fy)

#x_fy <- rep("FY1718",nrow(x))

#for(i in 1:length(x_fy)){
#if(as.character(x[,2][i])>="2018-04-01"){
#x_fy[i] <- "FY1819"
#}
#}

#x$FY <- as.factor(x_fy)

y7 <- cbind(y6,y_fy)

#########################################################################################################

#TEST.USERS#
#6583381170
#6597727199
#6596510899

test.users_vec <- c(6583381170,6597727199,6596510899)

y_test.users <- rep("NO",nrow(y))

for(i in 1:nrow(y)){
if(as.character(y$SOURCE_MSISDN)[i] %in% c('6583381170','6597727199','6596510899')){
y_test.users[i] <- "YES"
}
}

y_test.users <- as.factor(y_test.users)

#x_test.users <- rep("NO",nrow(x))

#for(i in 1:nrow(x)){
#if(as.character(x$SOURCE_MSISDN)[i] %in% c('6583381170','6597727199','6596510899')){
#x_test.users[i] <- "YES"
#}
#}

#x_test <- x %>%
#filter(as.character(SOURCE_MSISDN) %in% c('6583381170','6597727199','6596510899'),as.character(TEST.USERS) == "NO")

y8 <- cbind(y7,y_test.users)

##########################################################################################################

#MSISDN...MARK#

y_msisdn_mark <- as.factor(paste(y$SOURCE_MSISDN,y$MARK,sep="",collapse=NULL))

y9 <- cbind(y8,y_msisdn_mark)

##########################################################################################################

#TRANSACTION.DATE.2#

y_txn_date_2 <- as.factor(substr(y[,2],1,10))

y10 <- cbind(y9,y_txn_date_2)

##########################################################################################################

#TESTING ROUND 2#

test_class <- rep("FALSE",ncol(y10))
for(i in 1:ncol(y10)){
if(class(y10[,i])==class(x[,i])){
test_class[i] <- "TRUE"
}
}
test_class

##########################################################################################################

colnames(y10) <- colnames(x)

final_natly <- rbind(x,y10)

##########################################################################################################
#########################################################################################################
########################################################################################################
#######################################################################################################
######################################################################################################
#####################################################################################################
####################################################################################################
####################################################################################################
#####################################################################################################
######################################################################################################
#######################################################################################################

write.csv(final_natly,"C:\\Users\\P1318124\\Downloads\\Revised_Nationality.csv")


#UPDATED TILL REPORTING DAY 03 AUG 2018#
#UPDATED TILL REPORTING DAY 04 AUG 2018#
#UPDATED TILL REPORTING DAY 05 AUG 2018#
#UPDATED TILL REPORTING DAY 06 AUG 2018#
#UPDATED TILL REPORTING DAY 07 AUG 2018#
#UPDATED TILL REPORTING DAY 08 AUG 2018#
#UPDATED TILL REPORTING DAY 09 AUG 2018#
#UPDATED TILL REPORTING DAY 10 AUG 2018#
#UPDATED TILL REPORTING DAY 11 AUG 2018#
#UPDATED TILL REPORTING DAY 12 AUG 2018#
#UPDATED TILL REPORTING DAY 13 AUG 2018#
#UPDATED TILL REPORTING DAY 14 AUG 2018#
#UPDATED TILL REPORTING DAY 15 AUG 2018#
#UPDATED TILL REPORTING DAY 16 AUG 2018#
#UPDATED TILL REPORTING DAY 17 AUG 2018#
#UPDATED TILL REPORTING DAY 18 AUG 2018#
#UPDATED TILL REPORTING DAY 19 AUG 2018#
#UPDATED TILL REPORTING DAY 20 AUG 2018#
#UPDATED TILL REPORTING DAY 21 AUG 2018#
#UPDATED TILL REPORTING DAY 22 AUG 2018#
#UPDATED TILL REPORTING DAY 23 AUG 2018#
#UPDATED TILL REPORTING DAY 24 AUG 2018#
#UPDATED TILL REPORTING DAY 25 AUG 2018#
#UPDATED TILL REPORTING DAY 26 AUG 2018#
#UPDATED TILL REPORTING DAY 27 AUG 2018#
#UPDATED TILL REPORTING DAY 28 AUG 2018#




